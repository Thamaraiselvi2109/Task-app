
export type LoginStatusProps = {
  userDetails: Userprops,
  statusIn: 'idle' | 'loading' | 'succeeded' | 'failed'
  statusOut: 'idle' | 'loading' | 'succeeded' | 'failed'
  error: ErrorType
}


export type Userprops = {
  name: string | null;
  email: string | null;
  img: string | null;
}

export type ErrorType = string | null;


export interface ProtectedRouteProps {
  children: React.ReactNode;
}


export type task = {
  singleTask : TaskList[],
}

export type TaskList = {
  id: string;           // ID generated by nanoid()
  task: string ;  // Task , can be null initially
  description : string; // Task description, can be null initially
  duedate: Date;        // Due date as a Date object
  category: CategoryProps; // Task category, can be null initially
  status: StatusProps ;  // Status of the task, can be null initially
  isDone: boolean;      // Boolean to track if the task is completed
  isSelected: boolean;  // Boolean to track if the task is selected
};


export type CategoryProps = 'Work' | 'Personal' ;
export const TaskCategories: CategoryProps[] = ["Work", "Personal"];

export type StatusProps = 'Completed' | 'Onprogress' | 'Todo';
export const StatusCategories: StatusProps[] = ["Todo", "Onprogress", 'Completed'];


// This is the Type used for layout component to switch the layouts;
export type LayoutProps = {
  list : boolean
  board : boolean
}

// This is the Type used for to define the parameters in the accordion component;
export interface AccordionProps {
  singleTask: TaskList[];
  title: string;
}


export type OpenCloseProps = {
  Addtask : boolean,
  Accordion: { [key: string]: boolean };
}
